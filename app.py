# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kwRMsK-233y8DwZcATP3VPez9Y1KI4Mo
"""

import streamlit as st
import pickle
import pandas as pd
import shap
import numpy as np

# Load model
with open('xgboost_student_status.pkl', 'rb') as file:
    model = pickle.load(file)

# Load scaler
with open('scaler.pkl', 'rb') as file:
    scaler = pickle.load(file)

# Load daftar fitur yang digunakan saat training
with open('selected_features.pkl', 'rb') as file:
    selected_features = pickle.load(file)

st.title("Student Status Prediction")

# Tambahkan opsi contoh input
example_case = st.selectbox(
    "Pilih contoh input:",
    ["Masukkan data manual", "Contoh Enrolled", "Contoh Graduate"]
)

# Default input (bisa diedit oleh pengguna)
user_input = {
    "Application_order": 1,
    "Previous_qualification_grade": 140.0,
    "Admission_grade": 140.0,
    "Curricular_units_1st_sem_enrolled": 6,
    "Curricular_units_2nd_sem_enrolled": 6,
    "Curricular_units_1st_sem_grade": 11.83,
    "Curricular_units_2nd_sem_grade": 11.86,
    "GDP": 1.79,
    "Gender_M": True,
    "Daytime_evening_attendance_Evening": False,
}

# Gunakan contoh input jika dipilih
if example_case == "Contoh Enrolled":
    user_input.update({
        "Application_order": 2,
        "Previous_qualification_grade": 150.0,
        "Admission_grade": 160.0,
        "Curricular_units_1st_sem_enrolled": 7,
        "Curricular_units_2nd_sem_enrolled": 7,
        "Curricular_units_1st_sem_grade": 12.5,
        "Curricular_units_2nd_sem_grade": 12.8,
        "GDP": 2.0,
    })
elif example_case == "Contoh Graduate":
    user_input.update({
        "Application_order": 1,
        "Previous_qualification_grade": 180.0,
        "Admission_grade": 190.0,
        "Curricular_units_1st_sem_enrolled": 8,
        "Curricular_units_2nd_sem_enrolled": 8,
        "Curricular_units_1st_sem_grade": 15.0,
        "Curricular_units_2nd_sem_grade": 15.5,
        "GDP": 3.0,
    })

# Tampilkan input fields
for feature in user_input:
    if isinstance(user_input[feature], bool):
        user_input[feature] = st.selectbox(feature, ["Tidak", "Ya"]) == "Ya"
    else:
        user_input[feature] = st.number_input(feature, value=user_input[feature])

# Konversi input ke DataFrame
data_input = pd.DataFrame([user_input])
data_input = data_input.reindex(columns=selected_features, fill_value=0)
data_scaled = scaler.transform(data_input)

# Prediksi
if st.button("Predict"):
    prediction = model.predict(data_scaled)
    result = ["Dropout", "Enrolled", "Graduate"][prediction[0]]
    st.write(f"### Hasil Prediksi: {result}")

    # Analisis penyebab utama Dropout dengan SHAP
    if result == "Dropout":
        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(data_scaled)
    
        # Debugging: Cek shape SHAP values
        st.write(f"Shape SHAP values: {shap_values.shape}")
    
        # Jika model multi-class, ambil SHAP values hanya untuk kelas Dropout
        if isinstance(shap_values, list):
            shap_values_dropout = shap_values[0]  # Jika model XGBoost multi-class
        else:
            shap_values_dropout = shap_values[:, :, 0]  # Pastikan semua fitur diambil
    
        st.write(f"Shape SHAP values setelah dipilih: {shap_values_dropout.shape}")
    
        # Pastikan jumlah fitur sesuai
        if shap_values_dropout.shape[1] != len(selected_features):
            st.error(f"Jumlah fitur SHAP ({shap_values_dropout.shape[1]}) tidak cocok dengan selected_features ({len(selected_features)})!")
        else:
            # Hitung rata-rata absolut dari SHAP values untuk setiap fitur
            feature_importance = pd.Series(np.abs(shap_values_dropout).mean(axis=0), index=selected_features)
    
            # Ambil 3 faktor penyebab dropout terbesar
            top_factors = feature_importance.nlargest(3)
    
            st.write("üîç **Faktor utama penyebab Dropout:**")
            for factor, value in top_factors.items():
                st.write(f"- {factor} (SHAP Value: {value:.4f})")

